<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <mapper namespace="com.nexgrid.adcb.common.dao.CommonDAO">
  
  	<!-- CTN 정상 여부 -->
 	<select id="getBlockCTN" parameterType="java.lang.String" resultType="java.lang.Integer">
 		SELECT 
		    COUNT(*) 
		FROM 
		    TB_BLOCK_CTN 
		WHERE 
		    CTN = #{ctn}
 	</select>
 	
 	
 	
 	<!-- 요금제 정상 여부 -->
 	<select id="getBlockFeeType" parameterType="java.lang.String" resultType="java.lang.Integer">
 		SELECT 
			COUNT(*) 
		FROM 
			TB_BLOCK_FEE_TYPE 
		WHERE 
			FEE_TYPE_CD = #{feetype}
 	</select>
 	
 	
 	
 	<!-- SLA INSERT -->
 	<insert id="insertSLA">
 		INSERT INTO TB_API_LOGS (
	 		SEQ_ID,
	        RESULT_CODE,
	        REQ_TIME,
	        RSP_TIME,
	        API_TYPE,
         	API_RESULT,
         	HTTP_STATUS,
         	AMOUNT,
         	MSISDN,
         	CLIENT_TRANSACTIONID,
         	MERCHANT_ID,
         	REQUEST_ID,
         	BAN_UNPAID_YN_CODE,
         	CUST_GRD_CD,
         	ISSUER_ID
         	)
	     VALUES (
	     	#{logVO.seqId},
			#{logVO.resultCode},
			#{logVO.reqTime},
			#{logVO.resTime},
			#{logVO.apiType2},
			#{logVO.apiResultCode},
			#{param.http_status},
			<choose>
				<when test="param.purchaseAmount != null">
					#{param.purchaseAmount.amount},	<!-- Charge API -->
				</when>
				<when test="param.refundAmount != null">
					#{param.refundAmount.amount},	<!-- Refund API -->
				</when>
				<otherwise>
					#{param.payInfo.AMOUNT},		<!-- Reverse API -->
				</otherwise>
			</choose>
			<choose>
				<when test="param.msisdn != null">
					#{param.msisdn},
				</when>
				<otherwise>
					#{param.payInfo.MSISDN},
				</otherwise>
			</choose>
			
			<choose>
				<when test="param.clientTransactionId != null">
					#{param.clientTransactionId},	<!-- Charge API -->
				</when>
				<otherwise>
					#{param.clientRefundId},	<!-- Refund API -->				
				</otherwise>
			</choose>
			#{param.merchantId},
			<choose>
				<when test="param.requestId != null">
					#{param.requestId},		<!-- Charge, Refund API -->
				</when>
				<otherwise>
					#{param.chargeRequestId},	<!-- Reverse API -->				
				</otherwise>
			</choose>
			<choose>
				<when test="param.ncasRes != null">
					#{param.ncasRes.BAN_UNPAID_YN_CODE},
				</when>
				<otherwise>
					#{param.payInfo.BAN_UNPAID_YN_CODE},
				</otherwise>
			</choose>
			<choose>
				<when test="param.Res_111 != null">
					#{param.Res_111.CUST_GRD_CD},
				</when>
				<otherwise>
					#{param.payInfo.CUST_GRD_CD},
				</otherwise>
			</choose>
			#{param.issuerPaymentId}
			)
 	</insert>
 	
 	
 	
 	<!-- test phone 등록 여부 확인 -->
 	<select id="testPhoneCheck" parameterType="java.lang.String" resultType="java.lang.Integer">
	 	SELECT 
	 		COUNT (*)
	  	FROM 
	  		TB_ENROLLMENT_PHONE
	 	WHERE 
	 		CTN = #{ctn}
 	</select>
 	
 	
 	
 	<!-- 청구 API 요청 중복 체크 & PaymentStatus 가져오기 -->
 	<select id="reqDuplicateCheck" parameterType="java.util.Map" resultType="java.util.Map">
 		SELECT
 			REQUEST_ID,
 			ISSUER_PAYMENTID, 
 			RESULT_MSG, 
 			RESULT,
 			HTTP_STATUS
		FROM 
			TB_CHARGE_INFO
		WHERE 
			INIT_DATE IN (#{current_month}, #{last_month}) 
		    AND REQUEST_ID = #{requestId}
 	</select>
 	
 	
 	
 	<!-- 취소 및 환불 API에서 필요한 구매 정보 가져오기 -->
 	 <select id="getChargeInfo" parameterType="java.util.Map" resultType="java.util.Map">
 		SELECT
 			ISSUER_PAYMENTID,
 			AMOUNT,
 			PARTIAL_REFUND_SUM, 
 			BALANCE,
 			FEE_TYPE,
 			REFUNDINFO,
 			CTN,
 			SVC_AUTH,
 			SUB_NO,
 			REQUEST_ID,
 			RESULT_MSG,
 			RESULT,
 			HTTP_STATUS,
 			REG_DT,
 			REVERSE_DT,
 			BAN_UNPAID_YN_CODE,
 			CUST_GRD_CD,
 			YOUNG_FEE_YN,
 			BR_ID,
 			START_USE_TIME,
 			ISSUER_REVERSEID,
 			BAN,
 			ACE_NO,
 			MERCHANT_ID,
 			PRODUCT_DESCRIPTION,
 			MSISDN
		FROM 
			TB_CHARGE_INFO
		WHERE
			INIT_DATE IN (#{month1}, #{month2})
			<choose>
				<when test="issuerPaymentId != null">	<!-- Refund API -->
					AND ISSUER_PAYMENTID = #{issuerPaymentId}	
				</when>
				<otherwise>	<!-- Reverse API -->
					AND REQUEST_ID = #{chargeRequestId}
				</otherwise>
			</choose>
	</select>
 	
 	
 	
 	<!-- 환불 처리 누적 금액 & 환불후 잔액 UPDATE -->
	<update id="setBalance">
		UPDATE
			TB_CHARGE_INFO
		SET
			<choose>
				<when test="param.refundAmount != null"> <!-- Refund API -->
					BALANCE = AMOUNT - (PARTIAL_REFUND_SUM + #{param.refundAmount.amount}),
					PARTIAL_REFUND_SUM = PARTIAL_REFUND_SUM + #{param.refundAmount.amount}
				</when>
				<otherwise>	<!-- Reverse API -->
					BALANCE = AMOUNT - #{param.payInfo.AMOUNT},
					PARTIAL_REFUND_SUM = #{param.payInfo.AMOUNT},
					REVERSE_DT = #{param.reverse_dt},
					ISSUER_REVERSEID = #{param.issuerReverseId},
					TRANSACTION_TYPE = #{param.transaction_type}
				</otherwise>
			</choose>
		WHERE
			INIT_DATE IN (#{param.month1}, #{param.month2})
			<choose>
				<when test="param.issuerPaymentId != null"> <!-- Refund API -->
					 AND ISSUER_PAYMENTID = #{param.issuerPaymentId}
				</when>
				<otherwise> <!-- Reverse API -->
					AND REQUEST_ID = #{param.chargeRequestId}
				</otherwise>
			</choose>
		   
	</update>
	
	
	
	<!-- EAI -->
	<insert id="insertEAI" parameterType="com.nexgrid.adcb.common.vo.EaiVO">
		INSERT INTO TB_ADCB_EAI_SDW (
			NEW_REQUEST_TYPE,
			NEW_BAN_UNPAID_YN_CODE,
			NEW_ACCOUNT_TYPE,
			NEW_SMLS_STLM_DV_CD,
			NEW_SMLS_STLM_CMPNY_CD,
			NEW_CUST_GRD_CD,
			NEW_PRSS_YYMM,
			NEW_REQUEST_DATE,
			NEW_TOTAL,
			NEW_BAN,
			NEW_ACE_NO,
			NEW_SUBS_NO,
			NEW_REQUEST_ID,
			NEW_MERCHANT_ID,
			NEW_PRODUCT_DESCRIPTION
			)
		 VALUES (
		 	#{new_request_type},
			#{new_ban_unpaid_yn_code},
			#{new_account_type},
			#{new_smls_stlm_dv_cd},
			#{new_smls_stlm_cmpny_cd},
			#{new_cust_grd_cd},
			#{new_prss_yymm},
			#{new_request_date},
			#{new_total},
			#{new_ban},
			#{new_ace_no},
			#{new_subs_no},
			#{new_request_id},
			#{new_merchant_id},
			#{new_product_description}
		 	)
	</insert>
	
	
	
	<!-- SMS 정보 리스트 INSERT -->
	<insert id="insertSmsList" parameterType="com.nexgrid.adcb.common.vo.SmsSendVO">
		INSERT INTO TB_SMS_SEND_INFO (
   			GUBUN,
	     	TO_CTN,
	     	REQUEST_ID,
	     	CONTENT
		    )
		   VALUES (
	  		#{gubun},
	  		#{to_ctn},
	  		#{request_id},
	  		#{content}
		   	)
	</insert>
	
 </mapper>